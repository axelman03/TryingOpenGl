#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform vec3 lightColor;
uniform float nearField; //Field for the Nearest Water Depth
uniform float farField; //Field for the Farthest Water Depth

uniform float moveFactor;

const float waveStrength = 0.08;  //0.04
const float shineDamper = 20.0;
const float reflectivity = 0.5;


void main(void) {

	vec2 ndc = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
	vec2 refractTexCoords = vec2(ndc.x, ndc.y);
	vec2 reflectTexCoords = vec2(ndc.x, -ndc.y);
	
		//Used to get the depth of the water to do cool things
				//Getting distance of view vector from camera to the floor, through the water
	float depth = texture(depthMap, refractTexCoords).r;
	float floorDistance = 2.0 * nearField * farField / (farField + nearField - (2.0 * depth - 1.0) * (farField - nearField));
				//Getting distance of view vector, this time from the camera to the water
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * nearField * farField / (farField + nearField - (2.0 * depth - 1.0) * (farField - nearField));
				//Using the previous 2 vectors to find the distance from the water to the floor; the water depth
	float waterDepth = floorDistance - waterDistance;
	
		//Makes cool waves in the water
	vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg * 0.08;  //Use last number to change size of waves, smaller makes bigger waves
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y + moveFactor);
	vec2 totalDistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength * clamp(waterDepth/20.0, 0.0, 1.0);;
	
		//Makes water reflective
	refractTexCoords += totalDistortion;
	refractTexCoords = clamp(refractTexCoords, 0.001, 0.999);
	reflectTexCoords += totalDistortion;
	reflectTexCoords.x = clamp(reflectTexCoords.x, 0.001, 0.999);
	reflectTexCoords.y = clamp(reflectTexCoords.y, -0.999, -0.001);
				//Make reflections and refractions based off their texture maps
	vec4 reflectColor = texture(reflectionTexture, reflectTexCoords);
	vec4 refractColor = texture(refractionTexture, refractTexCoords);
	
		//Using a normal map to get the lighting on the waves to be accurate
	vec4 normalMapColor = texture(normalMap, distortedTexCoords);
	vec3 normal = vec3(normalMapColor.r * 2.0 - 1.0, normalMapColor.b * 3.0, normalMapColor.g * 2.0 - 1.0); //Takes the normals from the normal map to be used
	normal = normalize(normal);
	
		//use the cameras position to decide how reflective the water is
	vec3 viewVector = normalize(toCameraVector);
	float refractiveFactor = dot(viewVector, vec3(normal));
	refractiveFactor = pow(refractiveFactor, .5); //make water more or less reflective by making the power bigger or smaller
	refractiveFactor = clamp(refractiveFactor, 0.0, 1.0);
	
		//Light reflections on the water using the normals and specular lighting
	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, viewVector), 0.0) * clamp(waterDepth/5.0, 0.0, 1.0);;
	specular = pow(specular, shineDamper);
	vec3 specularHighlights = lightColor * specular * reflectivity;
	
		//The final output of the water
	out_Color = mix(reflectColor, refractColor, refractiveFactor);
	out_Color = mix(out_Color, vec4(0.0, 0.3, 0.5, 2.0), 0.2) + vec4(specularHighlights, 0.0); //Adds bluish tint to water and adds the light reflections
	out_Color.a = clamp(waterDepth/5.0, 0.0, 1.0); //At certain depth, water is no longer transparent, change that depth by changing the denominator
}
